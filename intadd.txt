intadd(int a, int b){
	int result, sum, carry
	result = 0
	sum = 0
	carry = 0
	while((a | b) > 0){
		result = result << 1
		sum = 0
		if(((b ^ a) & 1) == 1){
			sum = 1
		}
		if (sum == 1){
			result |= 1
		}
		else if (carry = 1){
			result |= 1
			carry = 0
		}
		if ((b & a) == 1){
			carry = 1
		}
		else if((sum & carry) == 1){
			carry = 1
		}
		a = a >> 1
		b = b >> 1
	}
}

intadd:
			push {r4-r10}
			mov r4, r0 // r4 = a
			mov r5, r1 // r5 = b
			mov r6, #0 // result = 0
			mov r7, #0 // sum = 0
			mov r8, #0 // carry = 0
			mov r9, #0 // temp
			mov r10, #0 // temp

while:		orr r9, r4, r5
			cmp r9, #0
			beq return
			LSL r6, r6, #1
			mov r7, #0

			b exor
exorReturn:
			and r9, r9, #1
			cmp r9, #1
			beq setSum
sumReturn:	
			cmp r7, #1
			beq addToResult1
			cmp r8, #1
			beq addToResult2
addReturn:	
			and r9, r4, r5
			and r9, r9, #1
			cmp r9, #1
			beq setCarry
			and r9, r7, r8
			and r9, r9, #0
			cmp r9, #1
			beq setCarry
carryReturn:
			LSR r4, r4, #1
			LSR r5, r5, #1
			b while

exor:
		and r9, r4, r5
		mvn r9, r9
		orr r10, r4, r5
		and r9, r9, r10
		b exorReturn

setSum:
			mov r7, #1
			b sumReturn
setCarry:
			mov r8, #1
			b carryReturn
addToResult1:
			orr r6, r6, #1
			b addReturn

addToResult2:
			orr r6, r6, #1
			mov r8, #0
			b addReturn

return:
			mov r0, r6
			mov pc, lr

------------------------------------------------------------------
int Add(int x, int y)
{
    // Iterate till there is no carry  
    while (y != 0){
        // carry now contains common 
        //set bits of x and y
        int carry = x & y;  
 
        // Sum of bits of x and y where at 
        //least one of the bits is not set
        x = x ^ y; 
 
        // Carry is shifted by one so that adding
        // it to x gives the required sum
        y = carry << 1;
    }
    return x;
}

intadd:
		push {r2-r4}
		mov r2, r0 //r2 = x
		mov r3, r1 //r3 = y
		mov r4, #0 //r4 = carry

while:
		cmp r3, #0
		beq return
		and r4, r2, r3
		eor r2, r2, r3
		LSL r3, r4, #1
		b while

return: pop {r2-r4}
		mov r0, r2

